import tkinter as tk
from tkinter import ttk, messagebox, simpledialog
from services.menu import MenuService
from services.order import OrderService
from utils.api import WeatherAPI
from utils.exporter import PDFExporter
from typing import Optional, Dict, List


class StaffDashboard:
    TEMP_MAPPING = {
        'hot': ('N√≥ng üî•', '#d32f2f'),
        'cold': ('L·∫°nh ‚ùÑÔ∏è', '#2196F3'),
        'both': ('C·∫£ hai üå°Ô∏è', '#4CAF50')
    }

    def __init__(self, user_id: int):
        self.user_id = user_id
        self.cart: List[Dict] = []
        self.current_filter: Optional[str] = None
        self.search_keyword: str = ""

        # Kh·ªüi t·∫°o services
        self.menu_service = MenuService()
        self.order_service = OrderService()
        self.weather_api = WeatherAPI()

        # C·∫•u h√¨nh giao di·ªán
        self.window = self._configure_window()
        self._setup_ui()
        self._load_initial_data()

    # c·∫•u h√¨nh
    def _configure_window(self) -> tk.Tk:
        """C·∫•u h√¨nh c·ª≠a s·ªï ch√≠nh"""
        window = tk.Tk()
        window.title("Staff Dashboard")
        window.geometry("1280x720")
        window.configure(bg="#f0f2f5")
        self._setup_styles()
        return window

    @staticmethod
    def _setup_styles():
        """C·∫•u h√¨nh styles cho c√°c widget"""
        style = ttk.Style()
        style.theme_use('clam')
        style.configure("Treeview.Heading", font=('Arial', 10, 'bold'), background='#e0e0e0')
        style.configure("Treeview", font=('Arial', 10), rowheight=25)
        style.map("Treeview", background=[('selected', '#3d85c6')])
        style.configure('Search.TButton', font=('Arial', 10), padding=5, relief='flat')
    # -----------------

    # UI Setup
    def _setup_ui(self):
        """X√¢y d·ª±ng giao di·ªán ng∆∞·ªùi d√πng"""
        main_frame = ttk.Frame(self.window)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

        self._build_header(main_frame)
        self._build_content(main_frame)

    def _build_header(self, parent):
        """X√¢y d·ª±ng ph·∫ßn header"""
        header_frame = ttk.Frame(parent)
        header_frame.pack(fill=tk.X, pady=(0, 10))

        # Weather display
        self.weather_label = ttk.Label(
            header_frame,
            text="ƒêang t·∫£i th·ªùi ti·∫øt...",
            font=('Arial', 10, 'italic'),
            foreground="#666"
        )
        self.weather_label.pack(side=tk.LEFT, padx=5)

        # Recommendation buttons
        self.recommendation_frame = ttk.Frame(header_frame)
        self.recommendation_frame.pack(side=tk.RIGHT, padx=10)

    def _build_content(self, parent):
        """X√¢y d·ª±ng ph·∫ßn n·ªôi dung ch√≠nh"""
        content_frame = ttk.Frame(parent)
        content_frame.pack(fill=tk.BOTH, expand=True)

        # Menu section
        menu_frame = self._build_menu_frame(content_frame)
        self._build_menu_components(menu_frame)

        # Cart section
        cart_frame = self._build_cart_frame(content_frame)
        self._build_cart_components(cart_frame)

    def _build_menu_frame(self, parent) -> ttk.Frame:
        """X√¢y d·ª±ng khung menu"""
        menu_frame = ttk.LabelFrame(parent, text=" Th·ª±c ƒë∆°n ", padding=10)
        menu_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        return menu_frame

    def _build_menu_components(self, parent):
        """X√¢y d·ª±ng c√°c th√†nh ph·∫ßn menu"""
        self._build_search_panel(parent)
        self._build_menu_treeview(parent)

    def _build_search_panel(self, parent):
        """X√¢y d·ª±ng thanh t√¨m ki·∫øm"""
        search_frame = ttk.Frame(parent)
        search_frame.pack(fill=tk.X, pady=(0, 10))

        self.search_var = tk.StringVar()
        self.entry_search = ttk.Entry(
            search_frame,
            textvariable=self.search_var,
            font=('Arial', 11),
            width=30
        )
        self.entry_search.pack(side=tk.LEFT, padx=(0, 5))
        self.entry_search.bind('<KeyRelease>', self._on_search)

        btn_clear_search = ttk.Button(
            search_frame,
            text="X√≥a",
            command=self._clear_search,
            style='Search.TButton'
        )
        btn_clear_search.pack(side=tk.LEFT)

    def _build_menu_treeview(self, parent):
        """X√¢y d·ª±ng treeview cho menu"""
        self.tree_menu = ttk.Treeview(
            parent,
            columns=("ID", "T√™n", "Size", "Nhi·ªát ƒë·ªô", "Gi√°"),
            show="headings",
            selectmode='browse'
        )

        columns = [
            ("ID", 50, 'center'),
            ("T√™n", 150, 'w'),
            ("Size", 60, 'center'),
            ("Nhi·ªát ƒë·ªô", 80, 'center'),
            ("Gi√°", 100, 'e')
        ]

        for col, width, anchor in columns:
            self.tree_menu.column(col, width=width, anchor=anchor)
            self.tree_menu.heading(col, text=col)

        self.tree_menu.pack(fill=tk.BOTH, expand=True)

    def _build_cart_frame(self, parent) -> ttk.Frame:
        """X√¢y d·ª±ng khung gi·ªè h√†ng"""
        cart_frame = ttk.LabelFrame(parent, text=" Gi·ªè h√†ng ", padding=10)
        cart_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True, padx=(10, 0))
        return cart_frame

    def _build_cart_components(self, parent):
        """X√¢y d·ª±ng c√°c th√†nh ph·∫ßn gi·ªè h√†ng"""
        self._build_cart_treeview(parent)
        self._build_cart_controls(parent)

    def _build_cart_treeview(self, parent):
        """X√¢y d·ª±ng treeview cho gi·ªè h√†ng"""
        self.tree_cart = ttk.Treeview(
            parent,
            columns=("ID", "T√™n", "Size", "Nhi·ªát ƒë·ªô", "SL", "Th√†nh ti·ªÅn"),
            show="headings"
        )

        columns = [
            ("ID", 50, 'center'),
            ("T√™n", 200, 'w'),
            ("Size", 60, 'center'),
            ("Nhi·ªát ƒë·ªô", 80, 'center'),
            ("SL", 60, 'center'),
            ("Th√†nh ti·ªÅn", 120, 'e')
        ]

        for col, width, anchor in columns:
            self.tree_cart.column(col, width=width, anchor=anchor)
            self.tree_cart.heading(col, text=col)

        self.tree_cart.pack(fill=tk.BOTH, expand=True)

    def _build_cart_controls(self, parent):
        """X√¢y d·ª±ng ph·∫ßn ƒëi·ªÅu khi·ªÉn gi·ªè h√†ng"""
        control_frame = ttk.Frame(parent)
        control_frame.pack(fill=tk.X, pady=(10, 0))

        # Action buttons
        self._build_cart_action_buttons(control_frame)

        # Total label
        self.lbl_total = ttk.Label(
            parent,
            text="T·ªïng ti·ªÅn: 0 VND",
            font=('Arial', 12, 'bold'),
            foreground="#d32f2f",
            anchor='e'
        )
        self.lbl_total.pack(fill=tk.X, pady=(10, 0))

    def _build_cart_action_buttons(self, parent):
        """X√¢y d·ª±ng c√°c n√∫t thao t√°c gi·ªè h√†ng"""
        button_configs = [
            ("‚ûï Th√™m", self._add_to_cart, "#4CAF50", tk.LEFT),
            ("‚ùå X√≥a", self._remove_from_cart, "#f44336", tk.LEFT),
            ("üí∞ T·∫°o ƒë∆°n", self._create_order, "#2196F3", tk.RIGHT)
        ]

        for text, command, color, side in button_configs:
            btn = tk.Button(
                parent,
                text=text,
                command=command,
                bg=color,
                fg="white",
                font=('Arial', 10, 'bold'),
                width=12,
                padx=10,
                pady=5
            )
            if text == "üí∞ T·∫°o ƒë∆°n":
                self.btn_checkout = btn
            btn.pack(side=side, padx=5)
    # ---------------------

    # load data v√† hi·ªÉn th·ªã
    def _load_initial_data(self):
        """T·∫£i d·ªØ li·ªáu ban ƒë·∫ßu"""
        self._load_menu()
        self._update_weather_recommendations()

    def _load_menu(self, temp_type: Optional[str] = None):
        """T·∫£i danh s√°ch menu"""
        try:
            items = self._get_filtered_items(temp_type)
            recommendations = self._get_recommendations()

            self.tree_menu.delete(*self.tree_menu.get_children())

            for item in items:
                tags = ('recommended',) if item['item_id'] in recommendations else ()
                self._insert_menu_item(item, tags)

            self.tree_menu.tag_configure('recommended', background='#e3f2fd')

        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i menu: {str(e)}")

    def _update_cart_display(self):
        """C·∫≠p nh·∫≠t hi·ªÉn th·ªã gi·ªè h√†ng"""
        self.tree_cart.delete(*self.tree_cart.get_children())
        total = 0

        for item in self.cart:
            subtotal = item['price'] * item['quantity']
            total += subtotal
            self._insert_cart_item(item, subtotal)

        self.lbl_total.config(text=f"T·ªïng ti·ªÅn: {total:,.0f} VND")
        self._update_checkout_button_state()

    def _insert_menu_item(self, item: Dict, tags: tuple):
        """Th√™m item v√†o treeview menu"""
        self.tree_menu.insert("", "end", values=(
            item['item_id'],
            item['name'],
            item['size'],
            self.TEMP_MAPPING[item['temperature_type']][0],
            f"{item['price']:,.0f}"
        ), tags=tags)

    def _insert_cart_item(self, item: Dict, subtotal: float):
        """Th√™m item v√†o treeview gi·ªè h√†ng"""
        self.tree_cart.insert("", "end", values=(
            item['item_id'],
            item['name'],
            item['size'],
            self.TEMP_MAPPING[item['temperature_type']][0],
            item['quantity'],
            f"{subtotal:,.0f} VND"
        ))
    # ----------------------

    # Weather and Recommendations
    def _update_weather_recommendations(self):
        """C·∫≠p nh·∫≠t th√¥ng tin th·ªùi ti·∫øt v√† ƒë·ªÅ xu·∫•t"""
        try:
            weather = self.weather_api.get_weather() or {}
            self._update_weather_display(weather)
            self._update_recommendation_buttons(weather.get('temp', 25))

        except Exception as e:
            print(f"L·ªói c·∫≠p nh·∫≠t th·ªùi ti·∫øt: {str(e)}")
            self.weather_label.config(text="Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t th·ªùi ti·∫øt")

    def _update_weather_display(self, weather: Dict):
        """C·∫≠p nh·∫≠t hi·ªÉn th·ªã th√¥ng tin th·ªùi ti·∫øt"""
        temp = weather.get('temp', 25)
        desc = weather.get('description', 'N/A').capitalize()
        self.weather_label.config(text=f"{temp}¬∞C - {desc}")

    def _update_recommendation_buttons(self, temperature: float):
        """C·∫≠p nh·∫≠t c√°c n√∫t ƒë·ªÅ xu·∫•t theo nhi·ªát ƒë·ªô"""
        for widget in self.recommendation_frame.winfo_children():
            widget.destroy()

        self._create_filter_buttons()
        self._create_temperature_buttons(temperature)

    def _create_filter_buttons(self):
        """T·∫°o c√°c n√∫t l·ªçc"""
        btn_all = tk.Button(
            self.recommendation_frame,
            text="üåê T·∫•t c·∫£",
            command=lambda: self._apply_filter(None),
            bg="#4CAF50" if not self.current_filter else "#E0E0E0",
            fg="white",
            padx=8,
            pady=4
        )
        btn_all.pack(side=tk.LEFT, padx=2)

    def _create_temperature_buttons(self, temperature: float):
        """T·∫°o c√°c n√∫t l·ªçc nhi·ªát ƒë·ªô"""
        recommendations = self.menu_service.get_recommendations(temperature)[:3]

        for item in recommendations:
            temp_type = item['temperature_type']
            btn = tk.Button(
                self.recommendation_frame,
                text=f"{item['name']} ({self.TEMP_MAPPING[temp_type][0]})",
                bg=self.TEMP_MAPPING[temp_type][1],
                fg="white",
                padx=8,
                pady=4,
                command=lambda t=temp_type: self._apply_filter(t)
            )
            btn.pack(side=tk.LEFT, padx=2)

    def _apply_filter(self, temp_type: Optional[str]):
        """√Åp d·ª•ng b·ªô l·ªçc nhi·ªát ƒë·ªô"""
        self.current_filter = temp_type
        self._load_menu(temp_type)
        self._update_button_styles()

    def _update_button_styles(self):
        """C·∫≠p nh·∫≠t style cho c√°c n√∫t l·ªçc"""
        for btn in self.recommendation_frame.winfo_children():
            if isinstance(btn, tk.Button):
                btn_text = btn.cget("text").lower()
                temp_type = None

                if 'n√≥ng' in btn_text:
                    temp_type = 'hot'
                elif 'l·∫°nh' in btn_text:
                    temp_type = 'cold'
                elif 'c·∫£ hai' in btn_text:
                    temp_type = 'both'
                elif 't·∫•t c·∫£' in btn_text:
                    temp_type = None

                btn.config(relief="sunken" if temp_type == self.current_filter else "raised")
    # ---------------------

    # cart
    def _add_to_cart(self):
        """Th√™m m√≥n v√†o gi·ªè h√†ng"""
        selected = self.tree_menu.selection()
        if not selected:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn m√≥n t·ª´ menu")
            return

        item_id = self.tree_menu.item(selected[0])['values'][0]
        item = self.menu_service.get_item_by_id(item_id)

        if not self._validate_item_availability(item):
            return

        size = self._get_size_from_user()
        quantity = self._get_quantity_from_user()

        if not size or not quantity:
            return

        self._update_cart(item, size, quantity)

    def _remove_from_cart(self):
        """X√≥a m√≥n kh·ªèi gi·ªè h√†ng"""
        selected = self.tree_cart.selection()
        if not selected:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn m√≥n trong gi·ªè")
            return

        item_id = self.tree_cart.item(selected[0])['values'][0]
        size = self.tree_cart.item(selected[0])['values'][2]

        self.cart = [
            item for item in self.cart
            if not (item['item_id'] == item_id and item['size'] == size)
        ]

        self._update_cart_display()

    def _update_cart(self, item: Dict, size: str, quantity: int):
        """C·∫≠p nh·∫≠t gi·ªè h√†ng"""
        existing_item = next(
            (i for i in self.cart
             if i['item_id'] == item['item_id'] and i['size'] == size),
            None
        )

        if existing_item:
            existing_item['quantity'] += quantity
        else:
            self.cart.append({
                **item,
                'size': size,
                'quantity': quantity
            })

        self._update_cart_display()

    def _validate_item_availability(self, item: Dict) -> bool:
        """Ki·ªÉm tra m√≥n c√≥ s·∫µn kh√¥ng"""
        if not item or not item.get('is_available'):
            messagebox.showerror("L·ªói", "M√≥n n√†y hi·ªán kh√¥ng kh·∫£ d·ª•ng!")
            return False
        return True

    def _get_size_from_user(self) -> Optional[str]:
        """L·∫•y size t·ª´ ng∆∞·ªùi d√πng"""
        size = simpledialog.askstring("Ch·ªçn size", "Nh·∫≠p size (S/M/L):", initialvalue="M")
        if size and size.upper() in {"S", "M", "L"}:
            return size.upper()
        messagebox.showerror("L·ªói", "Size kh√¥ng h·ª£p l·ªá!")
        return None

    def _get_quantity_from_user(self) -> Optional[int]:
        """L·∫•y s·ªë l∆∞·ª£ng t·ª´ ng∆∞·ªùi d√πng"""
        quantity = simpledialog.askinteger("S·ªë l∆∞·ª£ng", "Nh·∫≠p s·ªë l∆∞·ª£ng:", minvalue=1, initialvalue=1)
        if quantity and quantity > 0:
            return quantity
        messagebox.showerror("L·ªói", "S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá!")
        return None

    def _update_checkout_button_state(self):
        """C·∫≠p nh·∫≠t tr·∫°ng th√°i n√∫t thanh to√°n"""
        state = tk.NORMAL if self.cart else tk.DISABLED
        self.btn_checkout.config(state=state)
    # ---------------------

    # order
    def _create_order(self):
        """T·∫°o ƒë∆°n h√†ng m·ªõi"""
        try:
            if not self.cart:
                messagebox.showwarning("C·∫£nh b√°o", "Gi·ªè h√†ng tr·ªëng!")
                return

            order_id = self.order_service.create_order(self.user_id, self.cart)
            PDFExporter.export_order(order_id, self.cart, self.lbl_total.cget("text"))

            self._show_order_success(order_id)
            self._clear_cart()

        except Exception as e:
            messagebox.showerror("L·ªói", f"L·ªói khi t·∫°o ƒë∆°n: {str(e)}")

    def _show_order_success(self, order_id: int):
        """Hi·ªÉn th·ªã th√¥ng b√°o t·∫°o ƒë∆°n th√†nh c√¥ng"""
        messagebox.showinfo(
            "Th√†nh c√¥ng",
            f"ƒê√£ t·∫°o ƒë∆°n #{order_id}\nH√≥a ƒë∆°n ƒë√£ ƒë∆∞·ª£c xu·∫•t ra!"
        )

    def _clear_cart(self):
        """X√≥a to√†n b·ªô gi·ªè h√†ng"""
        self.cart.clear()
        self._update_cart_display()
    # -----------------

    # Utility
    def _get_filtered_items(self, temp_type: Optional[str]) -> List[Dict]:
        """L·∫•y danh s√°ch item ƒë√£ l·ªçc"""
        if self.search_keyword:
            return self.menu_service.search_items(self.search_keyword)

        items = self.menu_service.get_available_coffees()

        if temp_type:
            return [item for item in items if item['temperature_type'] == temp_type]

        return items

    def _get_recommendations(self) -> List[int]:
        """L·∫•y danh s√°ch ID c√°c m√≥n ƒë∆∞·ª£c ƒë·ªÅ xu·∫•t"""
        current_temp = self.weather_api.get_weather().get('temp', 25)
        recommendations = self.menu_service.get_recommendations(current_temp)
        return [item['item_id'] for item in recommendations]

    def _on_search(self, event=None):
        """X·ª≠ l√Ω s·ª± ki·ªán t√¨m ki·∫øm"""
        self.search_keyword = self.search_var.get().strip()
        self._load_menu(self.current_filter)

    def _clear_search(self):
        """X√≥a b·ªô l·ªçc t√¨m ki·∫øm"""
        self.search_var.set("")
        self.search_keyword = ""
        self._load_menu(self.current_filter)
    # ----------------

    def run(self):
        self.window.mainloop()